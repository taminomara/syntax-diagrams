"""
This type stub file was generated by pyright.
"""

from enum import Enum

class FSM:
    @classmethod
    def default(cls, n):
        ...

    @classmethod
    def default_next_state(cls, n, should_break): # -> tuple[Any, Any]:
        ...

    @classmethod
    def cr(cls, n): # -> tuple[Literal[False], Callable[..., tuple[Any, Callable[..., Any] | Callable[..., tuple[Literal[False], Callable[..., Any]] | Any] | Callable[..., tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | Any]] | Any]] | tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | Any]] | tuple[Literal[False], Callable[..., Any]] | Any] | Callable[..., tuple[Literal[False], Callable[..., Any]] | tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | Any]] | Any] | Callable[..., tuple[Literal[True], Callable[..., Any]] | tuple[Any, Any]]]]] | tuple[Any, Any]:
        ...

    @classmethod
    def lf_or_control(cls, n): # -> tuple[Any, Callable[..., Any] | Callable[..., tuple[Literal[False], Callable[..., Any]] | Any] | Callable[..., tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | Any]] | Any]] | tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | Any]] | tuple[Literal[False], Callable[..., Any]] | Any] | Callable[..., tuple[Literal[False], Callable[..., Any]] | tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | Any]] | Any] | Callable[..., tuple[Literal[True], Callable[..., Any]] | tuple[Any, Any]]]:
        ...

    @classmethod
    def prepend(cls, n): # -> tuple[Literal[True], Callable[..., Any]] | tuple[Literal[True], Callable[..., tuple[Literal[False], Callable[..., tuple[Any, Callable[..., Any] | Callable[..., tuple[Literal[False], Callable[..., Any]] | Any] | Callable[..., tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | Any]] | Any]] | tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | Any]] | tuple[Literal[False], Callable[..., Any]] | Any] | Callable[..., tuple[Literal[False], Callable[..., Any]] | tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | Any]] | Any] | Callable[..., tuple[Literal[True], Callable[..., Any]] | tuple[Any, Any]]]]] | tuple[Any, Any]]] | tuple[Any, Any]:
        ...

    @classmethod
    def hangul_l(cls, n): # -> tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | Any]] | Any]] | tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | Any]] | tuple[Literal[False], Callable[..., Any]]:
        ...

    @classmethod
    def hangul_lv_or_v(cls, n): # -> tuple[Literal[False], Callable[..., Any]] | tuple[Literal[False], Callable[..., tuple[Literal[False], Callable[..., Any]] | Any]]:
        ...

    @classmethod
    def hangul_lvt_or_t(cls, n): # -> tuple[Literal[False], Callable[..., Any]]:
        ...

    @classmethod
    def emoji(cls, n):
        ...

    @classmethod
    def emoji_zjw(cls, n): # -> tuple[Literal[False], Callable[..., Any]]:
        ...

    @classmethod
    def ri(cls, n): # -> tuple[Literal[False], Callable[..., Any]]:
        ...



class BreakPossibility(Enum):
    CERTAIN = ...
    POSSIBLE = ...
    NO_BREAK = ...


def get_break_possibility(a, b): # -> Literal[BreakPossibility.CERTAIN, BreakPossibility.POSSIBLE, BreakPossibility.NO_BREAK]:
    ...

def get_last_certain_break_index(string, index): # -> int:
    ...

class GraphemeIterator:
    def __init__(self, string) -> None:
        ...

    def __iter__(self): # -> Self:
        ...

    def __next__(self): # -> None:
        ...
